@page "/matrixOps"

<head>
    <style>

    </style>
</head>

<center>

    <h3>MatrixOps</h3>
                
    <!--Set Menu-->
            <!--radio buttons-->
            <div class="radioBtnDiv">
                <input @onclick="multCheckFalse" checked type="radio" class="opsRadio" id="addSub" name="choseOp" >
                <label  class ="opsRadioLabel" for="html">Add/Subtract</label><br> 
                <input @onclick="multCheckTrue" type="radio" class="opsRadio" id="mult" name="choseOp" >
                <label class ="opsRadioLabel" for="html">Multiplication</label><br> 
            </div>
    <table class="mainSetTable">                                   
        <!--set matrix A-->
        <td>            
            <table class="miniSetTable">
            <tr>
                <!--head-->                
                <td colspan="3">
                    <center>
                        <p class="regularText" ><b>@setMatrixAText</b></p>
                    </center>
                </td>        
            </tr>
            <tr >
                <!--labels+inputs-->   
                <div id="inputsDiv">                
                    <td>                      
                        <p class="regularText" id ="setTextRows">Rows</p>
                        <p class="regularText" id ="setTextColumns">Columns</p>                
                    </td>
                    <td style ="width:15px;">

                    </td>            
                    <td>
                        <input class ="matrixParam"  @bind="rowsA"/>
                        <br />
                        <input class ="matrixParam" id="columnInput" @bind="columnsARowsB" />                
                    </td>
                </div>                                                                     

            </tr>
        </table>
        </td>
        <!--set matrix B-->
        <td hidden=@hideMatrixB>
            <table class="miniSetTable" id="matrixBsetTable">
            <tr> 
                <!--head-->                
                <td colspan="3">
                    <center>
                        <p class="regularText" ><b>Matrix B</b></p>
                    </center>
                </td>            
            </tr>
            <tr >
                <!--labels+inputs-->   
                <div id="inputsDiv">                
                    <td>                      
                        <p class="regularText" id ="setTextRows">Rows</p>
                        <p class="regularText" id ="setTextColumns">Columns</p>                
                    </td>
                    <td style ="width:15px;">

                    </td>            
                    <td>
                        <input class ="matrixParam"  @bind="columnsARowsB"/>
                        <br />
                        <input class ="matrixParam" id="columnInput" @bind="columnsB" />                
                    </td>
                </div>                                                                     

            </tr>
        </table>
        </td>
    </table>
        

    <!--Materil design textbox-->
            <!--
                    <div class="input-contain">
                        <input type="text" id="fname" name="fname" autocomplete="off" value="" aria-labelledby="placeholder-fname">
                        <label class="placeholder-text" for="fname" id="placeholder-fname">
                            <div class="text">Rows</div>
                        </label>
                    </div>            
            -->      

    <!--Set Menu Button-->
    <!-- (my old button) <button class="setBtn" @onclick="showMatrix"> Set Matrixes</button>  -->
    <MatButton style="background-color:#4681f4;margin-top:10px" Raised="true" @onclick="showMatrix">set matrixes
    </MatButton>

    <!-- solid line-->
    <hr />

    <!--Matrixes-->
    <div class="matrixes">
        <table class="matrixes">
            <tr>
                <!--table head (hidden)-->
                <th class="tableHead" hidden="@(!matrixInitCheck)">
                    <center>
                        <p class="regularText">Matrix A</p>
                    </center>
                </th>
                <th class="tableHead" hidden="@(!matrixInitCheck)"></th>
                <th class="tableHead" hidden="@(!matrixInitCheck)">
                    <center>
                        <p class="regularText">Matrix B</p>
                    </center>
                </th>
                <th class="tableHead" hidden="@(!matrixInitCheck)"></th>
                <th class="tableHead" hidden="@(!matrixInitCheck)">
                    <center>
                        <p class="regularText">Result Matrix</p>
                    </center>
                </th>
            </tr>
            <tr>
                <td>
                    <!--matrix A-->
                    @if (matrixInitCheck == true)
                    {
                        for (int i = 0; i < matrixA.GetLength(0); i++)
                        {
                            int localI = i;
                            for (int j = 0; j < matrixA.GetLength(1); j++)
                            {
                                int localJ = j;
                                <input class="matrixInput" @bind="@matrixA[localI,localJ]" type="text" />
                            }
                            <br />
                        }
                    }
                </td>
                <!-- operation buttons -->
                <td class="spacerTd" hidden="@(!matrixInitCheck)">
                    <!--spacer (hidden)-->
                    <!-- + button-->
                    <center><button class="calcBtn" id="addBtn" @onclick="add">+</button></center>

                    <!-- - button-->
                    <center><button class="calcBtn" id="subBtn" @onclick="sub">-</button></center>
                </td>

                <td>
                    <!--matrix B-->
                    @if (matrixInitCheck == true)
                    {
                        for (int i = 0; i < matrixB.GetLength(0); i++)
                        {
                            int localI = i;
                            for (int j = 0; j < matrixB.GetLength(1); j++)
                            {
                                int localJ = j;
                                <input class="matrixInput" @bind="@matrixB[localI,localJ]" type="text" />
                            }
                            <br />
                        }
                    }
                </td>

                <td class="spacerTd" hidden="@(!matrixInitCheck)">
                    <!--spacer (hidden) -->
                    <center>
                        <h4>=</h4>
                    </center>
                </td>
                <td hidden="@(!resultMatrixInitCheck || !matrixInitCheck)">
                    <!--wait indicator-->
                    <cener>
                        <div class="waitDiv">
                            <center>...</center>
                        </div>
                    </cener>
                </td>
                <td hidden="@resultMatrixInitCheck">
                    <!--matrix Result-->

                    @if (matrixInitCheck == true)
                    {
                        for (int i = 0; i < resultMatrix.GetLength(0); i++)
                        {
                            int localI = i;
                            for (int j = 0; j < resultMatrix.GetLength(1); j++)
                            {
                                int localJ = j;
                                <input class="matrixInput" @bind="@resultMatrix[localI,localJ]" type="text" />
                            }
                            <br />
                        }
                    }
                </td>
            </tr>
        </table>

    </div>
    <!--End of Matrixes Div-->



    <!--<input class="testInput" type="text" @bind="testString"/>-->

</center>

@code {
    // set menu
    public bool hideMatrixB = true;

    public string? rowsA, columnsARowsB,columnsB;
    public int intRowsA, intColumnsARowsB,intColumnsB;

    public string setMatrixAText = "Matrixes A & B";

    // matrix menu
    public int[,]? matrixA, matrixB, resultMatrix;
    public string testString = "";
    public bool matrixInitCheck = false, resultMatrixInitCheck = true;

    //private bool hideBox {get;set;} = true;

    public void showMatrix()
    {

        if (hideMatrixB == true)
        {
            intRowsA = int.Parse(rowsA);
            intColumnsARowsB = int.Parse(columnsARowsB);

            matrixA = new int[intRowsA, intColumnsARowsB];
            matrixB = new int[intRowsA, intColumnsARowsB];
            resultMatrix = new int[intRowsA, intColumnsARowsB];

            matrixInitCheck = true;
            resultMatrixInitCheck = true;

        }
        else
        {
            intRowsA = int.Parse(rowsA);
            intColumnsARowsB = int.Parse(columnsARowsB);
            intColumnsB = int.Parse(columnsB);

            matrixA = new int[intRowsA, intColumnsARowsB];
            matrixB = new int[intColumnsARowsB, intColumnsB];
            resultMatrix = new int[intRowsA, intColumnsARowsB];

            matrixInitCheck = true;
            resultMatrixInitCheck = true;
        }
       

        //hideBox = !hideBox;
        //hideBox = !hideBox;

    }

    private void add()
    {
        resultMatrix = BlazorApp.Handlers.MatrixHandler.addMatrixes(matrixA, matrixB);
        resultMatrixInitCheck = false;
    }

    private void sub()
    {
        resultMatrix = BlazorApp.Handlers.MatrixHandler.subMatrixes(matrixA, matrixB);
        resultMatrixInitCheck = false;
    }

    private void multCheckTrue()
    {
        hideMatrixB = false;
        setMatrixAText = "Matrix A";
    }
    private void multCheckFalse()
    {
        hideMatrixB = true;
        setMatrixAText = "Matrixes A & B";
    }
}
