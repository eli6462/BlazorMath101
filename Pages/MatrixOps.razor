@page "/matrixOps"
<head>
<style>
    table.setTable{
        margin-top: 25px;
    }
    input.matrixParam{
        width:30px;
        height:25px;
    }
    p.regularText{
        font-family:Arial;
    }
    #setText{
        margin-top:20px;
        margin-right:5px;
    }
    button.setBtn{
        margin-top:5px;
        border-radius:5px;
        background-color:#4681f4;
        color:white;        
        border: none;        
    }
    .setBtn:hover{
        background-color:#3765BF;
    }

    /* matrixes */

    div.matrixes{
        margin-top:25px;
    }
    th.tableHead{
        height:10px;
    }
    input.matrixInput{
        width:30px;
        height:25px;
    }
    td.spacerTd{
        width:60px;
    }
    
    button.calcBtn{
        width:25px;
        height:30px;
        border-radius:5px;
        color:white;
        border: none;                
        background-color: #4681f4;
    }
    .calcBtn:hover{        
        background-color:#3765BF;       
    }
    #addBtn{
        margin-top:20%;
    }
    #subBtn{
        margin-bottom:20%;
        margin-top:10%;
    }
    div.waitDiv{
        height:30px;
        width:60px;
        border-radius:5px;
        background-color:lightgrey;
        margin-left:25%;
    }
    
    /*
    input.testInput{
        width:600px
    }
    */
    
</style>
</head>

<center>

    <h3>MatrixOps</h3>

    <!--Set Menu-->
    <table class="setTable">
        <tr>
            <td><p class="regularText" id ="setText">Matrix rows:</p></td>
            <td><input class ="matrixParam" @bind="rows" /></td>
            <td style ="width:30px;"></td>
            <td><p class="regularText" id ="setText">Matrix columns:</p></td>
            <td><input class ="matrixParam" @bind="columns" /></td>
        </tr>
    </table>

    <!--Set Menu Button-->
    <button class="setBtn" @onclick="showMatrix">
        Set Matrixes
    </button>

    <!--Matrixes-->
    <div class="matrixes">
        <table class ="matrixes">
            <tr>
                <!--table head (hidden)-->
                <th class="tableHead" hidden ="@(!matrixInitCheck)"><center><p class="regularText">Matrix A</p></center></th>
                <th class="tableHead" hidden ="@(!matrixInitCheck)"></th>
                <th class="tableHead" hidden ="@(!matrixInitCheck)"><center><p class="regularText">Matrix B</p></center></th>
                <th class="tableHead" hidden ="@(!matrixInitCheck)"></th>
                <th class="tableHead" hidden ="@(!matrixInitCheck)"><center><p class="regularText">Result Matrix</p></center></th>
            </tr>
            <tr>
                <td> <!--matrix A-->                                                                             
                    @if(matrixInitCheck == true)
                    {                          
                        for(int i = 0; i < matrixA.GetLength(0); i++)
                        {
                            int localI = i;
                            for( int j = 0; j < matrixA.GetLength(1); j++)
                            {
                                int localJ = j;                                
                                <input class="matrixInput" @bind="@matrixA[localI,localJ]" type="text" />                               
                            }
                            <br />
                        }
                    }                                                               
                </td>
                <!-- operation buttons -->
                <td class ="spacerTd" hidden ="@(!matrixInitCheck)"><!--spacer (hidden)-->
                        <!-- + button-->
                    <center><button class ="calcBtn" id="addBtn"@onclick="add">+</button></center>
                    
                        <!-- - button-->
                        <center><button class ="calcBtn" id="subBtn" @onclick="sub">-</button></center>
                </td>

                <td> <!--matrix B-->                                        
                    @if(matrixInitCheck == true)
                    {                          
                        for(int i = 0; i < matrixB.GetLength(0); i++)
                        {
                            int localI = i;
                            for( int j = 0; j < matrixB.GetLength(1); j++)
                            {
                                int localJ = j;                                
                                <input class="matrixInput" @bind="@matrixB[localI,localJ]" type="text" />                               
                            }
                            <br />
                        }
                    }       
                </td>

                <td class ="spacerTd" hidden ="@(!matrixInitCheck)"><!--spacer (hidden) -->
                    <center><h4>=</h4></center>
                </td>
                <td hidden ="@(!resultMatrixInitCheck || !matrixInitCheck)"><!--wait indicator-->
                    <cener><div class="waitDiv">
                        <center>...</center>
                        </div></cener>
                </td>                
                <td hidden ="@resultMatrixInitCheck"> <!--matrix Result-->                    
                    
                    @if(matrixInitCheck == true)
                    {                          
                        for(int i = 0; i < resultMatrix.GetLength(0); i++)
                        {
                            int localI = i;
                            for( int j = 0; j < resultMatrix.GetLength(1); j++)
                            {
                                int localJ = j;                                
                                <input class="matrixInput" @bind="@resultMatrix[localI,localJ]" type="text" />                               
                            }
                            <br />
                        }
                    }
                </td>
            </tr>
        </table>
    
    </div> <!--End of Matrixes Div-->  
    
    <!--<input class="testInput" type="text" @bind="testString"/>-->
</center>

@code {
    public string? rows,columns;    
    public int intRows,intColumns;    

    public int[,] matrixA,matrixB,resultMatrix;    
    public string testString = "";
    public bool matrixInitCheck = false,resultMatrixInitCheck = true;   

    //private bool hideBox {get;set;} = true;

    public void showMatrix()
    {
        intRows = int.Parse(rows);
        intColumns = int.Parse(columns);

        matrixA = new int[intRows,intColumns];
        matrixB = new int[intRows,intColumns];
        resultMatrix = new int[intRows,intColumns];        

        matrixInitCheck = true;
        resultMatrixInitCheck = true;

        //hideBox = !hideBox;
        //hideBox = !hideBox;

    }

    private void add()
    {
        resultMatrix = BlazorApp.Handlers.MatrixHandler.addMatrixes(matrixA, matrixB);
        resultMatrixInitCheck = false;
    }

    private void sub()
    {
        resultMatrix = BlazorApp.Handlers.MatrixHandler.subMatrixes(matrixA, matrixB);
        resultMatrixInitCheck = false;
    }
}
